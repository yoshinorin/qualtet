openapi: 3.1.0
info:
  title: Qualtet API
  description: |
    # Description
    This API documentation regarding OpenAPI specification. Generated by [ReDoc](https://github.com/Rebilly/ReDoc).
  version: v1.5.0
externalDocs:
  description: Source code
  url: 'https://github.com/yoshinorin/qualtet'
servers:
  - url: http://example.com/
paths:
  /status:
    get:
      summary: Get API server status
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: operational
  /token:
    post:
      summary: Create an IDToken
      description: |
        Create an IDToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestToken'
      responses:
        201:
          description: Create an IDToken succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idToken'
        400:
          description: Payload is wrong
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/errorMessage'
        401:
          description: Unauthorized
  /archives:
    get:
      summary: Get all articles
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/article'
  /articles:
    get:
      summary: Get articles with count
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: The number of all articles.
                    type: integer
                    example: 99
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/simpleArticle'
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of pages for pagination.
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of items to return. Max is 10.
  /authors:
    get:
      summary: Get all authors
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
  /authors/{authorName}:
    get:
      summary: Get an author
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/author'
        404:
          description: Author not found
          # content: TODO
  /contents:
    post:
      summary: Create or Update a content
      description: |
        Create or Update a content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContent'
      responses:
        201:
          description: Create or Update succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseContent'
        400:
          description: BadRequest
        401:
          description: Unauthorized
        404:
          description: Content type is not found
          # content: TODO
  /contents/{contentPath}:
    get:
      summary: Get a content
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseContent'
        404:
          description: Content not found
          # content: TODO
  /tags:
    get:
      summary: Get a tags
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/tag'
  /tags/{tagName}:
    get:
      summary: Get an articles by tagName
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/simpleArticle'
        404:
          description: Content not found
          # content: TODO
  /content-types/{contentPath}:
    get:
      summary: Get content-types
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/contentType'
  /content-types/{contentTypeName}:
    get:
      summary: Get a content-type with name
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentType'
  /sitemaps:
    get:
      summary: Get an articles url & updated date for sitemaps.xml
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sitemaps'
  /feed/{feedName}:
    get:
      summary: Get a feeds
      responses:
        200:
          description: Response when Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/feed'
components:
  schemas:
    requestToken:
      type: object
      properties:
        authorId:
          type: string
          example: "01dfvhk1bz8lk1e4b1s2hdw9ku"
        password:
          type: string
          example: "examplepassword"
      required:
        - authorId
        - password
    idToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3Mi...."
    author:
      type: object
      properties:
        id:
          type: string
          format: ulid
          example: "01fgvhk1bz6546e4b1s2hdw0pw"
        name:
          type: string
          example: JohnDoe
        displayName:
          type: string
          example: John
        createdAt:
          type: long
          description: Unix time
          example: 1625065318
    contentType:
      type: object
      properties:
        id:
          type: string
          format: ulid
          example: "01fgvhjxftxfjvxg3xbvv78kr1"
        name:
          type: string
          example: "article"
    externalResource:
      type: object
      properties:
        kind:
          type: string
          example: "js"
        values:
          type: array
          example: "['mathjax','marmaid']"
    tag:
      type: object
      properties:
        id:
          type: string
          format: ulid
          example: "01frdbdb6s2mxshxzk3wan0f6d"
        name:
          type: string
          example: "diary"
    simpleArticle:
      type: object
      properties:
        id:
          type: string
          format: ulid
          example: "01fgvhme5b7cj0m5agr9f4g2ca"
        title:
          type: string
          example: "Post Title"
        publishedAt:
          type: long
          description: Unix time
          example: 1625065318
    article:
      type: object
      properties:
        id:
          type: string
          format: ulid
          example: "01fgvhme5b7cj0m5agr9f4g2ca"
        title:
          type: string
          example: "Post Title"
        content:
          type: string
          example: "Post Content.... RAW strings"
        publishedAt:
          type: long
          description: Unix time
          example: 1625065509
        updatedAt:
          type: long
          description: Unix time
          example: 1625065592
    feed:
      type: object
      properties:
        title:
          type: string
          example: "Post Title"
        link:
          type: string
          format: url(excludes domain part)
          example: "/post/test-article"
        id:
          type: string
          format: url(excludes domain part)
          example: "/post/test-article"
        published:
          type: long
          description: Unix time
          example: 1625065509
        updated:
          type: long
          description: Unix time
          example: 1625065592
    requestContent:
      type: object
      properties:
        contentType:
          type: string
          example: "article"
        path:
          type: string
          example: "/2020/01/01/new-year"
        externalResources:
          type: array
          items:
            $ref: '#/components/schemas/externalResource'
        title:
          type: string
          example: "Post Title"
        rawContent:
          type: string
          example: "Post Content.... RAW strings"
        htmlContent:
          type: string
          example: "Post Content.... HTML strings"
        tags:
          type: array
          example: "['diary', 'tech']"
        publishedAt:
          type: long
          description: Unix time
          example: 1625065509
        updatedAt:
          type: long
          description: Unix time
          example: 1625065509
      required:
        - contentType
        - path
        - title
        - rawContent
        - htmlContent
    responseContent:
      type: object
      properties:
        id:
          type: string
          format: ulid
          example: "01fgvhme5b7cj0m5agr9f4g2ca"
        authorId:
          type: string
          format: ulid
          example: "01fgvhk1bz6546e4b1s2hdw0pw"
        contentTypeId:
          type: string
          format: ulid
          example: "01fgvhjxftxfjvxg3xbvv78kr1"
        title:
          type: string
          example: "Post Title"
        robotsAttributes:
          type: string
          example: "noarchive, noimageindex"
        externalResources:
          type: array
          items:
            $ref: '#/components/schemas/externalResource'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag'
        description:
          type: string
          example: "Post description... not HTML strings"
        content:
          type: string
          example: "Post Content.... HTML strings"
        authorName:
          type: string
          description: "This field return from `authors.display_name` coloumn value."
          example: "Jhon Due"
        publishedAt:
          type: long
          description: Unix time
          example: 1625065509
        updatedAt:
          type: long
          description: Unix time
          example: 1627095819
    sitemaps:
      type: object
      properties:
        loc:
          type: string
          example: "https://example.com/aaa/bbb/ccc"
        lastMod:
          type: string
          example: "YYYY-MM-DD"
    errorMessage:
      type: object
      properties:
        message:
          type: string
          example: Something is wrong
